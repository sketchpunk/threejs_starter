Latest Version of ThreeJS needs a builder, this example shows how to setup 
A project with rollup to bundle 
https://github.com/Mugen87/three-jsm


Another Bundler/Server recommendation on how to use ThreeJS
https://www.snowpack.dev/


How to setup a way to use Package Names without a Bundler
https://dmnsgn.medium.com/in-2020-go-bundler-free-eb29c1f05fc9


Library to make ImportMaps work easier for multiple browsers
but must incude library on every page plus doesn't seem to handle loading shared json :/
https://github.com/guybedford/es-module-shims


Very cool Toon Shaders
https://twitter.com/axiom_3d/status/1552637075576557572?s=20&t=-t6gMqLjtH6TvlENxXDJpA
https://github.com/mayacoda/toon-shader


Paralax Mapping & Parallax Interior Cubemaps
https://www.youtube.com/watch?v=eX7x1mJrQJs
https://www.habrador.com/tutorials/shaders/2-interior-mapping/
https://halisavakis.com/my-take-on-shaders-interior-mapping/
https://seblagarde.wordpress.com/2012/09/29/image-based-lighting-approaches-and-parallax-corrected-cubemap/


https://github.com/robert-leitl/boris/blob/main/src/app/util/fit-to-viewport.js
/**
 * Sets the distance, near and far plane of the camera according to the sphere radius
 * at the origin. It is assumed that the camera looks at the origin.
 *
 * @param radius
 * @param camera
 * @param sizePaddingFactor Padding around the object relative to the radius of the sphere
 * @param nearPlanePaddingFactor The near plane relative to the front of the sphere
 * @param farPlanePaddingFactor The far plane relative to the back of the sphere
 */
export function fitSphereAtOriginToViewport(radius, camera, sizePaddingFactor = 0, nearPlanePaddingFactor = 0, farPlanePaddingFactor = 0) {
    const r = radius * (1 + sizePaddingFactor);
    const fov = Math.PI * camera.fov / 360;
    if (camera.aspect >= 1) {
        camera.position.z = r / Math.sin(fov);
    } else {
        camera.position.z = r / (camera.aspect * Math.sin(fov));
    }
    camera.near = (camera.position.z - r) - r * nearPlanePaddingFactor;
    camera.far = (camera.position.z + r)  + r * farPlanePaddingFactor;
}